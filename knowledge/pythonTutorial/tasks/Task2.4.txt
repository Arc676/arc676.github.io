Not everything in the universe happens. Some things don't happen. The 
same happens with computer programs. They don't always crash, but they 
do sometimes.
They don't always print a certain error message, but they do if the 
conditions are right.

Executing code only when a condition is met is called selection. You can 
use an 'if' block to execute a section of code only when a condition is met.

	2.4.1-2: Constucting an if block using comparison operators

Use the following syntax to create an if block:

if condition:
	statement

The tab before the inside of the block is very important. Python takes 
indentation very seriously, so don't forget to indent. More importantly, don't
forget to stop indenting after the block is done.

if condition:
	statement
more statements

Here, 'statement' is run only if 'condition' is true. However, 'more 
statements' will run no matter what.

Here, we introduce booleans. They are a special variable type that only 
hold 1 of 2 values: True or False. You can use a comparison operator to 
get a boolean result that tells you if the expression is true. You use 
them in the same way you would use math operators: in between values.

Here are some examples of comparison operators:

== - checks if the two arguments are the same value and the same type
>  - check if the left argument is greater than the right one
<  - opposite of >
>= - check if the left argument is greater than OR equal to the right one
<= - check if the left argument is LESS than OR equal to the right one
!= - checks that the arguments are not the same

For numbers, this is straightforward. The two numbers are either the 
same number or they're not and if they don't match one will be greater 
than the other. With strings, the "size" is based on alphabetical order. 
For example, "a" is LESS than "b" because A comes before B in the 
alphabet. Uppercase letters are also "smaller" than lowercase letters.

Extension: This is because of something called ASCII. It stands for 
American Standard Code for Information Interchange. Unicode was an 
improvement on this technology because it had support for more 
characters. In ASCII, the letter 'A' is 01000001, or 65. Codes 66-90 are 
the letters B through Z. The lowercase letters start with 'a' at 
01100001, or 97. The rest of the lowercase letters are 98-122. As you 
can see, the numbers given to these letters makes them obvious and very 
easy to remember. For 'A', the 64 bit and the 1 bit are on. For 'a', the 
64, 32, and 1 bits are on. If you can count in binary or do math in base 
2, you can easily find the codes for any character.

===			====

Task: Write a program that asks the user for a number. For each of the 
	following situations, construct an if block and print a suitable 
	message:
		-the number equal to 5
		-the number greater than 2
		-the number less than or equal to 20
		-the number anything OTHER than 15

===			====

There's more to if blocks than just that though. Sometimes, if one 
condition isn't met, you want to check another one, but you don't want 
to check the second one if the first one is met. This can be the case if 
you want to check if a user's input is 1 or 2. You can use 'elif', which 
means "otherwise, if", to avoid checking multiple times.

---			----

Discussion: Why is the following code redundant?

number = raw_input("Enter a either 1 or 2: ")
number = int(number)
if number == 1:
	print "It's 1"
if number == 2:
	print "It's 2"

---			----

To improve the above code, you can use elif:

if number == 1:
	print "It's 1"
elif number == 2:
	print "It's 2"

Here, the second comparison will never happen if the first is matched. 
This is more efficient, as only as many comparisons are run as are 
needed. If you have hundreds of conditions, checking them all would take 
a lot of time and energy. It would be a waste. In this example, we check 
if the input is 1 or 2. It obviously can't be both, so checking twice is 
useless. If the input is 1, then we know for a fact that it isn't 2.

When you only have 2 possibilities, it's even more efficient to use 'else':

if number == 1:
	print "It's 1"
else:
	print "It's 2, because that's the only other option"


	2.4.3 Boolean logic and expressions

Boolean logic refers to using booleans to determine truths. We can 
create expressions with booleans, just like we can with math. Use these 
boolean operators in exactly the same way you would use a math operator.

Use & to indicate AND. You can also use the word "and".
Use | to indicate OR. You can also use the word "or".

AND will evaluate to true if both values given are true.
OR will evaluate to true if either of the values are true.

Order does not matter.

For example:
True & False => False
True & True => True
True | False => True
True | True => True
False | False => False
False | True => True

===			===

Task: Write a program that asks the user for a number. For each of the 
	following conditions, output a suitable message:
	-the number is between 0 and 10, inclusive
	-the number is between 65 and 290, inclusive, BUT IS NOT 256
	-the number is 256
	-none of the above

Extension: Can you optimize your code?

===			===

	2.4.4 Precedence of boolean operators

Precendence refers to which operations come first. In math, you learn 
about certain operations coming before other ones (e.g. multiplication 
before addition). Similarly, boolean operators also have precendence. To 
"take precedence" over something means to be executed before that something.

===			===

Task: Before moving on see if you can find out for yourself which 
	operator takes precendence in boolean operations. Is it OR or 
	AND?

===			===

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.


Time's up! You should have found out that AND takes precedence over OR.

---			---

Discussion: discuss with the person next to you. Did either of your find 
	out which operator took precedence? How?

Extension: Why do you think AND takes precedence?

---			---

There is another way of thinking about boolean operators. Think of a 
boolean as a number. Anything greater than 0 is True. 0 is False. The 
AND operator with a False will turn any True into a False. How can you 
do this with numbers? It's easy: anything multiplied by 0 is 0. 
Therefore, you can think of AND as multiplication. OR can be thought of 
as addition. Any positive number times another positive number is still 
a positive number. Anything number greater than or equal to 0 plus a 
positive number is a positive number.

As in math, multiplication takes precedence over addition. AND takes 
precedence over OR.

However, this can be changed by adding parentheses (). The same applies 
in Python. Add parentheses around any statement to make sure that's evaluated first.

Example:
False and False or True => True, because AND takes precedence so this is equivalent to (False and False) or True => False or True => True
False and (False or True) => False, because the parentheses take precedence so this is False and (False or True) => False and False => False

===			===

Task: Design a boolean expression that includes both AND and OR 
	operators and parentheses. Exchange with the person next to you. 
	Evaluate each other's boolean expressions. Do you agree on the 
	answer? If not, run it in the Python interpreter and see who's 
	right.

	Explain why this is the answer.

===			===
