Imagine a world where you couldn't save your game. Wouldn't that be 
horrible? Enter files.

	4.1: Redirecting in the command line

When in a shell, you can use > to redirect the output of the command you 
run. Then supply a filename. For example:

echo Hello, world! > file.txt

This will print the echoed text to the file, but not to the console 
(meaning that you won't see it on the screen).

===			===

Task: Find an old program you have written (like a hello world program 
	from 2.1.1 or something else that doesn't require user input) or 
	just write a new program and run it BUT redirect the output to a 
	file.

===			===

	4.2: Files in the command line

You can view the contents of a file using the cat command.
Use the head command to see the first 10 lines. You can specify the 
number of lines with the -n flag:

head -n 15 myfile.txt

Similarly, use the tail command to see the last 10 lines. You can 
specify the number of lines in the same way.

===			===

Task: Use the 3 commands from 4.2 to view some of your old programs.

===			===
	4.3.1 and 4.3.2 Using files in Python

Reading and writing to and from the filesystem is an integral part of
computer science. Aside from using it to store all your work, you need it
to store your preferences, personal data, and much more.

So let's jump into using files in your Python programs.

Essential "static" commands:
open(filename, mode) - opens a file with the specified filename
	The mode parameter is a string that tells Python how you want to
	open the file. Use these modes:
		"r" - read the file only
		"w" - truncate (clear) the file and write to it
	There are other modes, but we'll ignore them for now.
	You can always search for them online anyway.

Instance methods for your files:
file.write(text) - writes the specified text to the file
	This will cause an IOError if the file is in readonly mode
file.readlines() - returns an array of strings that contain each line
file.read() - returns the contents of the entire file as a single string

file.close() - THIS IS IMPORTANT: you must close the file after you're
	done with it. Just as you would close the door to your house
	after opening it because otherwise weird people would come in,
	you have to close your files after opening them. Otherwise, you will
	lose the contents of the file.

===			====

Task: write a program that asks for the user's name and write a greeting
	to that user to a file. Then read that file and print out its contents

===			====

===			====

Extension: write a simple text editor. It must ask for a filename. Input until
	an empty line is entered and save the input to a file with the
	specified filename.

===			====
