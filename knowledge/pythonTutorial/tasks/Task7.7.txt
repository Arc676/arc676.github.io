	7.7	Recursion
In order to understand recursion, you must first understand recursion.

A recursive function is one that calls itself.

	def recursiveFoo():
		recursiveFoo()
This particular function will call itself indefinitely, eventually 
causing a stack overflow error (the stack contains information about 
which function called which other function)

Example stack:
	raw_input()
	getUserInput()
	configureDevice()
	initialize()
	main()

For a recursive function, the stack looks like this:
	recursiveFoo()
	recursiveFoo()
	recursiveFoo()
	recursiveFoo()
	main()

Recursive functions are used more often in imperative programming (which 
Python isn't) but are still useful.

Factorial function:
	def factorial(n):
		if n <= 1:
			return 1
		return n * factorial(n - 1)

Stack:
	factorial(1)
	factorial(2)
	factorial(3)
	factorial(4)
	factorial(5)

Returns 120 (5! = 120).

===			===

Task: Write recursive functions for the following tasks.
	Sum of numbers in a list
	Sum of numbers from 1 to N
	Create an N dimensional NxN array

	Write a recursive function that calls itself exactly N times.

===			===
