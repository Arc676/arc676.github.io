	7.5	Short Circuiting

Computers are smart enough to avoid performing redundant operations.

	x = True or a > b

Here, x will be assigned the value 'True' regardless of the values of a and b
because True or (anything) will always be true. You can exploit this to reduce
the line count of your programs. This technique is called short-circuiting.

Let's say you need a certain condition to be true, and you want to call a function
if the condition is NOT true. This is one way:

	if not condition:
		function()

You can use short-circuiting to make this shorter:

	condition or function()

You cannot, however, put something that does not return a value in this structure,
so you cannot put a print statement here.

	condition or print "Bad input"
		      ^^Syntax error

Generally, the function would be to repair the condition being false.

	a = 0
	b = 0

	def uh_oh():
		global a
		global b
		print "You didn't obey the instructions"
		a = b + 1

	a = int(raw_input("Enter A: "))
	b = int(raw_input("Enter a number smaller than A: "))

	a > b or uh_oh()

	print "A is now greater than B"

Opportunities to use this are few and far between, but it's a good technique.
