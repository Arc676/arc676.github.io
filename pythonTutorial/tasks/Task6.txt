As mentioned before, copying and pasting code is extremely bad practice. If you
have to modify it at any point, you will have to modify each copy. But what if
you can't use a loop? What if you have to do the same thing multiple times in
different places? Enter functions.

	6.1 Introduction to Functions

A function is a block of code with an identifier, like a variable, that can be
called at any point using that identifier. Functions are used when you have to
do the same thing multiple times. You've actually already used functions before.
Both raw_input() and int() are functions.

To declare a function, use the def keyword. Then give the function a name, add
some parentheses, and then a colon to begin the block, just like with an if block
or a loop.

	def myFunction():
		#do stuff here

Call your own functions the same way you would call any other function.

	myFunction()

Like with predefined functions, your functions can take arguments. These are pieces
of information that you give to the function. Simply put them in the parentheses.

	def printSum(a, b):
		print a, "+", b, "=", (a + b)

===			====

Task: Write a function that asks the user for their name and define a function that
	prints a greeting using the user's name. Then, print the greeting twice.

===			====

Scope becomes very important with functions. A variable declared in a function
cannot be used outside that function.

	x = 42

	def printX():
		print x #=> Error: x not defined

To use a variable declared outside a function, use global:

	def betterPrintX():
		global x
		print x #=> 42

To use a variable declared inside a function outside the function, you have to
return it, which is the next spec point.

	6.2 Returning values from functions

Practically all the functions you've used have given you some sort of information.
The raw_input() function gives you the user's input, int() gives you the integer
form of a variable, and so on. Your functions can also return a value. Just use
the return keyword.

	def getSum(a, b):
		return (a + b)

	a = 5
	b = 6
	total = getSum(a, b) #=> 11

Because Python is loosely typed, you can return any data type with a function, but
this is not possible with many other programming languages.

===			====

Task: Write a program asks the user for a width and height. Then use a function to
	calculate the area of a rectangle with the given properties. You may choose
	to pass them as arguments OR to use the global keywords.

===			====
