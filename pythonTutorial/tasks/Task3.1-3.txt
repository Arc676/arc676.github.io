Sometimes, you don't know how many objects you will need. In programming,
you might want to have lists of objects so you can store an indefinite
number of variables. This is also important because you don't have to
explicitly name each one.

	3.1	Lists

Lists and arrays allow you to store multiple values in a single variable
with a single identifier. This is useful when you don't know how many
values you will have to store. Each value in a list can be accessed
via its index, which can be thought of as its distance from the first
element. The index of the first item is 0.

	[Item1, Item2, Item3, Item4]
	 0,	1,	2,	3

Lists and arrays are not technically the same thing, but the terms are
sometimes used interchangeably, not always correctly. In Python, we will
use only lists.

----

A 'literal' is a direct representation of an object, like a string in
quotes or a number.

----

Delimit list literals with brackets

	myList = [thing1, thing2, thing3]

You can turn strings into lists of characters with the list() function

	list("Hello!") #=> ['H', 'e', 'l', 'l', 'o', '!']

Access an element of a list by delimiting the index in brackets after
the identifier. Don't forget that the first element is at index 0.

	myList[0] #=> thing1
	myList[1] #=> thing2

If you try to access an index where there is no value, i.e. an index greater
than the index of the last element, you get IndexError.

	>>> ['H', 'e', 'l', 'l', 'o', '!'][6]
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	IndexError: list index out of range

However, you CAN give negative indices. They are counted from the end of the
list. The element at index -1 is the last element. Note that lists are only
zero indexed from the front.

	[1, 2, 3, 4, 5][-1] #=> 5

Assign values to the list using the same syntax.

	myList[0] = newThing

You can also obtain parts of arrays by using a colon in the index.
The first number is the starting index and the second number is the last
index. The array returned does not include the element at that index.
Omitting either value yields an array that starts from the beginning
or end of the original (i.e. array[:n] yields the first n elements
and array[n:] gives all elements after the first n).

	myList[1:3] #=> ['e', 'l']
	myList[:3] #=> ['H', 'e', 'l']
	myList[4:] #=> ['o', '!']

You can use the same syntax to obtain parts of strings because
they are, in essence, arrays of characters.

	"Hello world!"[6] #=> 'w'
	"Hello world!"[8:] #=> 'rld!'
	"Hello world!"[:5] #=> 'Hello'

You get the same IndexError if the provided index is too large. However, if you
use the colon (i.e. you try to access a section of the list), you can provide ANY
indices and no error will be raised. Below, "sections" of an empty array are
obtained, even though the length of the list is 0, but no error is raised.

	[][:5] #=> []
	[][10000:1235245] #=> []

===			===

Task: Define some arbitrary lists and print them to the console.
	Then, ask the user for input and reprint the reply as a list.

===			===

	3.2	Iterating through lists

You've actually done this before. The range() function returns a list,
and you've iterated through each element of the list with the for-in
structure.

	for element in list:
		statements

	3.3.1-2	Basic List Functions

One of the advantages of using lists is that you can add to them. To
add an element to a list, use the append function, but call it on the
list using dot-syntax.

----

Dot-syntax: object.function(arguments)

----

You can count the number of occurrences of a value using the count()
function.
The len() function is NOT called on the object and returns the length
of the list. Note that this is 1 more than the index of the last item.
Another important function is the index() function. It returns the index of the
first occurence of the given value in the list.

	myList = ['H', 'e', 'l', 'l', 'o']
	myList.append('!')
	myList.count("l") #=> 2
	len(myList) #=> 6
	myList.index('l') #=> 2

Sometimes, however, you don't want to just add to the end of the list.
You can use the insert(index, item) function to insert an item at a
specific index. The index you provide will be the index of the new
item.
The pop() function removes the item at the specified index and returns
it.
What if you know the value of the element to remove, but not its location?
Use the remove() function. It removes the first instance of the given value.
Another useful function is reverse() (kinda does what it says on the tin).

	myList.insert(1, "?")
	myList #=> ['H', '?', 'e', 'l', 'l', 'o']

	myList.pop(1) #=> '?'
	myList.remove("l")
	myList #=> ['H', 'e', 'l', 'o']

	myList.reverse()
	myList #=> ['o', 'l', 'e', 'H']
