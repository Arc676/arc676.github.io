	3.4	Multi-dimensional Arrays

Sometimes, you might need to have a grid of data. In these cases, you use
a two dimensional array. In simple terms, it's just an array inside an
array. It allows you to access data like a grid.

	[
		[0,  1,  2,  3,  4],
		[5,  6,  7,  8,  9],
		[10, 11, 12, 13, 14],
		[15, 16, 17, 18, 19],
		[20, 21, 22, 23, 24]
	]

	3.4.1 Accessing elements

Access the elements just like you would for a regular array, but with two
indices instead. If you visualize the array as depicted in this file, the
Y coordinate of your element comes first, because the first index indicates
which inner array to access. Don't forget that arrays are zero-indexed (i.e.
the first element has index 0).

	array[y][x]
	array[0][0] #=> 0
	array[3][4] #=> 19

	3.4.2	Iterating through 2D arrays

The for-in structure returns the elements in the array, so you can iterate
through the elements in a second loop.

	for innerArray in outerArray:
		for element in innerArray:
			print element

	3.4.3	Uses of 2D arrays

Multi-dimensional arrays have very niche uses. One example would be the
seating plan for an auditorium.

Example uses include anything involving a list of lists:
	List of rows of seats (seat availability in a theater)
	List of names in forms
	List of list of reminders (e.g. categories of reminders)

===			===

Task: You're planning an event at a large auditorium. Write a program that
	allows users to enter a seat such as A5 or E3 and then either tell
	them that it's occupied, or ask for their name and reserve the
	seat with their name. Your theater should have at least 5 rows
	with at least 5 seats per row.

===			===
